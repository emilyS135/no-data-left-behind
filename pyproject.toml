# ---
# Poetry Dependency Management
# ---

[tool.poetry]
name = "NoDataLeftBehind"
version = "0.1.0"
authors = ["Simon MÃ¼ller <simon.mueller@xitaso.com>","Emily Schiller <emily.schiller@xitaso.com>"]
readme = "README.md"
package-mode = false

[tool.poetry.dependencies]
python = ">=3.10,<3.13"
python-dotenv = ">=0.5.1"
mlflow = "^2.12.1"
azure-ai-ml = "^1.15.0"
numpy = "^1.26.4"

scienceplots = "^2.1.1"
matplotlib = "^3.8.4"
seaborn = "^0.13.2"
pandas = {extras = ["excel", "feather", "performance", "plot"], version = "^2.2.2"}
scikit-learn = "^1.3.0"
neuralforecast = "^1.7.0"
utilsforecast = "^0.1.7"
statsforecast = "^1.7.4"
darts = "^0.29.0"
torch = {version = "^2.3.0", source = "pytorch-cpu", markers = "extra!='cuda'" }
hydra-core = ">=1.1.0"

deptry = "^0.20.0"
antlr4-python3-runtime = "==4.9.3"
hydra-colorlog = "^1.2.0"
rich = "^13.7.1"
tqdm = "^4.66.2"


vulture = "^2.12"
[build-system]
requires = ["poetry-core"]
build-backend = "poetry.core.masonry.api"


# trying to install the right torch version without needlessly downloading all cuda stuff
[tool.poetry.group.remote]
optional = true

[tool.poetry.group.remote.dependencies]
torch = {version = "^2.3.0", source = "pytorch-cu121", markers = "extra=='cuda'"}

[tool.poetry.extras]
cuda = []

[[tool.poetry.source]]
name = "pytorch-cpu"
url = "https://download.pytorch.org/whl/cpu"
priority = "explicit"

[[tool.poetry.source]]
name = "pytorch-cu121"
url = "https://download.pytorch.org/whl/cu121"
priority = "explicit"

# poetry install # to get CPU version
# poetry install -E cuda --with remote # to get GPU version

# ---

[project]
requires-python = ">=3.10"

# ---
# Ruff Formatter + Linter
# ---

[tool.ruff]
# Same as Black.
line-length = 99
indent-width = 4


# Exclude a variety of commonly ignored directories.
exclude = [
    ".bzr",
    ".direnv",
    ".eggs",
    ".git",
    ".git-rewrite",
    ".hg",
    ".ipynb_checkpoints",
    ".mypy_cache",
    ".nox",
    ".pants.d",
    ".pyenv",
    ".pytest_cache",
    ".pytype",
    ".ruff_cache",
    ".svn",
    ".tox",
    ".venv",
    ".vscode",
    "__pypackages__",
    "_build",
    "buck-out",
    "build",
    "dist",
    "node_modules",
    "site-packages",
    "venv",
]

[tool.ruff.lint]
# Enable Pyflakes (`F`) and a subset of the pycodestyle (`E`)  codes by default.
# Unlike Flake8, Ruff doesn't enable pycodestyle warnings (`W`) or
# McCabe complexity (`C901`) by default.
select = ["E4", "E7", "E9", "F"]
ignore = []

# Allow fix for all enabled rules (when `--fix`) is provided.
fixable = ["ALL"]
unfixable = []

# Allow unused variables when underscore-prefixed.
dummy-variable-rgx = "^(_+|(_+[a-zA-Z0-9_]*[a-zA-Z0-9]+?))$"

[tool.ruff.format]
# Like Black, use double quotes for strings.
quote-style = "double"

# Like Black, indent with spaces, rather than tabs.
indent-style = "space"

# Like Black, respect magic trailing commas.
skip-magic-trailing-comma = false

# Use `\n` line endings for all files
line-ending = "lf"

# Enable auto-formatting of code examples in docstrings. Markdown,
# reStructuredText code/literal blocks and doctests are all supported.
#
# This is currently disabled by default, but it is planned for this
# to be opt-out in the future.
docstring-code-format = true

# Set the line length limit used when formatting code snippets in
# docstrings.
#
# This only has an effect when the `docstring-code-format` setting is
# enabled.
docstring-code-line-length = "dynamic"
